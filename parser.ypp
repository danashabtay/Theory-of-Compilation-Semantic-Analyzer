%{
#include "output.hpp"
extern int yylex();
using namespace output;
using namespace std;
void yyerror(const char *s);
extern int yylineno;

%}



%token TYPE
%token ID
%token SC
%token RETURN
%token IF
%token WHILE
%token BREAK
%token CONTINUE
%token CALL
%token INT
%token BYTE
%token BOOL
%token NUM
%token B
%token STRING
%token TRUE
%token FALSE

%right ASSIGN
%left OR
%left AND
%left EQUALITY
%left RELATIONAL
%left ADD_AND_SUB
%left MULT_AND_DIV
%right NOT
%left LPAREN RPAREN LBRACE RBRACE
%right ELSE





%%

Program : Statements { printProductionRule(1); }
;

Statements : Statement { printProductionRule(2); }
            | Statements Statement { printProductionRule(3); }
;

Statement : LBRACE Statements RBRACE { printProductionRule(4); }
            | Type ID SC { printProductionRule(5); }
            | Type ID ASSIGN Exp SC { printProductionRule(6); }
            | ID ASSIGN Exp SC { printProductionRule(7); }
            | Call SC { printProductionRule(8); }
            | RETURN SC { printProductionRule(9); }
            | IF LPAREN Exp RPAREN Statement { printProductionRule(10); }
            | IF LPAREN Exp RPAREN Statement ELSE Statement { printProductionRule(11); }
            | WHILE LPAREN Exp RPAREN Statement { printProductionRule(12); }
            | BREAK SC { printProductionRule(13); }
            | CONTINUE SC { printProductionRule(14); }
;

Call : ID LPAREN Exp RPAREN { printProductionRule(15); }
;

Type : INT { $$ = new Type($1); }
     | BYTE { $$ = new Type($1); }
     | BOOL { $$ = new Type($1); }
;

Exp : LPAREN Exp RPAREN {  }
    | Exp MULT_AND_DIV Exp {  }
    | Exp ADD_AND_SUB Exp {  }
    | ID { $$ = new Exp($1, "id"); }
    | Call { $$ = new Exp($1); }
    | NUM { $$ = new Exp($1, "num"); }
    | NUM B {  }
    | STRING {  }
    | TRUE { $$ = new Exp($1); }
    | FALSE { $$ = new Exp($1); }
    | NOT Exp {  }
    | Exp AND Exp {  }
    | Exp OR Exp {  }
    | Exp RELATIONAL Exp {  }
    | Exp EQUALITY Exp {  }
    | LPAREN Type RPAREN Exp { }
;

%%

/* C code section */

int main() {
    return yyparse();
}

void yyerror(const char *s) {
    errorSyn(yylineno);
    exit(0);
}
