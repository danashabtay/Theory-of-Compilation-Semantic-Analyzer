%{
#include "hw3_output.hpp"
extern int yylex();
using namespace output;
using namespace std;
void yyerror(const char *s);
extern int yylineno;

%}



%token TYPE
%token ID
%token SC
%token RETURN
%token IF
%token WHILE
%token BREAK
%token CONTINUE
%token CALL
%token INT
%token BYTE
%token BOOL
%token NUM
%token B
%token STRING
%token TRUE
%token FALSE

%right ASSIGN
%left OR
%left AND
%left EQUALITY
%left RELATIONAL
%left ADD_AND_SUB
%left MULT_AND_DIV
%right NOT
%left LPAREN RPAREN LBRACE RBRACE
%right ELSE





%%

Program : Statements { printProductionRule(1); }
;

Statements : Statement { printProductionRule(2); }
            | Statements Statement { printProductionRule(3); }
;

Statement : LBRACE Statements RBRACE {  }
            | Type ID SC {  }
            | Type ID ASSIGN Exp SC {  }
            | ID ASSIGN Exp SC {  }
            | Call SC {  }
            | RETURN SC {  } // nothing????
            | IF LPAREN Exp RPAREN Statement {  }
            | IF LPAREN Exp RPAREN Statement ELSE Statement {  }
            | WHILE LPAREN Exp RPAREN {stacks.addTable(true);} Statement {  }
            | BREAK SC { $$ = new Statement($1); }
            | CONTINUE SC { $$ = new Statement($1); }
;

Call : ID LPAREN Exp RPAREN { $$ = new Call($1, $3); }
;

Type : INT { $$ = new Type("int"); }
     | BYTE { $$ = new Type("byte"); }
     | BOOL { $$ = new Type("bool"); }
;

Exp : LPAREN Exp RPAREN { $$ = new Exp(dynamic_cast<Exp*>($2))}
    | Exp PLUS Exp { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3), "arithmetic"); }
    | Exp MINUS Exp { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3), "arithmetic"); }
    | Exp MULT Exp { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3), "arithmetic"); }
    | Exp DIV Exp { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3), "arithmetic"); }
    | ID { $$ = new Exp($1)}
    | Call { $$ = new Exp(dynamic_cast<Call*>($1)) }
    | NUM { $$ = new Exp("int"); }
    | NUM B { $$ = new Exp("byte", $1); }
    | STRING { $$ = new Exp("string"); }
    | TRUE { $$ = new Exp("bool"); }
    | FALSE { $$ = new Exp("bool"); }
    | NOT Exp { $$ = new Exp(dynamic_cast<Exp*>($2), "logic"); }
    | Exp AND Exp { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3), "logic"); }
    | Exp OR Exp { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3), "logic"); }
    | Exp EQUALITYOP Exp { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3), "relop"); }
    | Exp RELATIONALOP Exp { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3), "relop"); }
    | LPAREN Type RPAREN Exp { $$ = new Exp(dynamic_cast<Exp*>($4), dynamic_cast<Type*>($2)); }
    ;

%%

/* C code section */

symTableStack stacks = symTableStack();

int main() {
    return yyparse();
}

void yyerror(const char *s) {
    errorSyn(yylineno);
    exit(0);
}
